<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flowable表结构介绍</title>
      <link href="/2024/01/26/gong-zuo-liu/flowable/flowable-biao-jie-gou/"/>
      <url>/2024/01/26/gong-zuo-liu/flowable/flowable-biao-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="flowable表结构"><a href="#flowable表结构" class="headerlink" title="flowable表结构"></a>flowable表结构</h2><h3 id="一、表结构详解"><a href="#一、表结构详解" class="headerlink" title="一、表结构详解"></a>一、表结构详解</h3><p>表的sql文件：<code>flowable-engine-6.3.0.jar!  \org\flowable\db\create\flowable.mysql.create.engine.sql</code></p><p>工作流程的相关操作都是操作存储在对应的表结构中，为了能更好的弄清楚flowable的实现原理和细节，我们有必要先弄清楚Flowable的相关表结构及其作用。在Flowable中的表结构在初始化的时候会创建五类表结构，具体如下：</p><h4 id="1、ACT-RE"><a href="#1、ACT-RE" class="headerlink" title="1、ACT_RE_*"></a>1、ACT_RE_*</h4><p><code>RE</code>表示<code> repository</code>。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。</p><h4 id="2、ACT-RU"><a href="#2、ACT-RU" class="headerlink" title="2、ACT_RU_*"></a>2、ACT_RU_*</h4><p><code>RU</code>表示 <code>runtime</code>。 这些运行时的表，包含流程实例，任务，变量，异步任务等运行中的数据。 Flowable<strong>只在流程实例执行过程中</strong>保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</p><h4 id="3、ACT-HI"><a href="#3、ACT-HI" class="headerlink" title="3、ACT_HI_*"></a>3、ACT_HI_*</h4><p><code>HI</code>表示 <code>history</code>。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</p><h4 id="4、ACT-GE"><a href="#4、ACT-GE" class="headerlink" title="4、ACT_GE_*"></a>4、ACT_GE_*</h4><p><code> GE</code> 表示 <code>general</code>。 通用数据， 用于不同场景下</p><h4 id="5、ACT-ID"><a href="#5、ACT-ID" class="headerlink" title="5、ACT_ID_*"></a>5、ACT_ID_*</h4><p><code>ID</code>表示<code>identity</code>(组织机构)。这些表包含标识的信息，如用户，用户组，等等。</p><p>具体的表结构的含义:</p><table><thead><tr><th>表分类</th><th>表名</th><th>解释</th></tr></thead><tbody><tr><td>ACT_GE_*（ 一般数据）</td><td></td><td></td></tr><tr><td></td><td>act_ge_bytearray</td><td>通用的流程定义和流程资源</td></tr><tr><td></td><td>act_ge_property</td><td>系统相关属性</td></tr><tr><td>ACT_HI_*（流程历史记录）</td><td></td><td></td></tr><tr><td></td><td>act_hi_actinst</td><td>历史的流程实例</td></tr><tr><td></td><td>act_hi_attachment</td><td>历史的流程附件</td></tr><tr><td></td><td>act_hi_comment</td><td>历史的说明性信息</td></tr><tr><td></td><td>act_hi_detail</td><td>历史的流程运行中的细节信息</td></tr><tr><td></td><td>act_hi_identitylink</td><td>历史的流程运行过程中用户关系</td></tr><tr><td></td><td>act_hi_procinst</td><td>历史的流程实例</td></tr><tr><td></td><td>act_hi_taskinst</td><td>历史的任务实例</td></tr><tr><td></td><td>act_hi_varinst</td><td>历史的流程运行中的变量信息</td></tr><tr><td>ACT_RE_*（流程定义表）</td><td></td><td></td></tr><tr><td></td><td>act_re_deployment</td><td>部署单元信息</td></tr><tr><td></td><td>act_re_model</td><td>模型信息</td></tr><tr><td></td><td>act_re_procdef</td><td>已部署的流程定义</td></tr><tr><td>ACT_RU_*（运行实例表）</td><td></td><td></td></tr><tr><td></td><td>act_ru_deadletter_job</td><td></td></tr><tr><td></td><td>act_ru_event_subscr</td><td>运行时事件</td></tr><tr><td></td><td>act_ru_execution</td><td>运行时流程执行实例</td></tr><tr><td></td><td>act_ru_history_job</td><td></td></tr><tr><td></td><td>act_ru_identitylink</td><td>运行时用户关系信息，存储任务节点与参与者的相关信息</td></tr><tr><td></td><td>act_ru_job</td><td>运行时作业</td></tr><tr><td></td><td>act_ru_suspended_job</td><td>运行时挂起的作业</td></tr><tr><td></td><td>act_ru_task</td><td>运行时任务</td></tr><tr><td></td><td>act_ru_timer_job</td><td></td></tr><tr><td></td><td>act_ru_variable</td><td>运行时变量表</td></tr><tr><td>ACT_ID_*（用户用户组表）</td><td></td><td></td></tr><tr><td></td><td>act_id_bytearray</td><td>二进制数据表</td></tr><tr><td></td><td>act_id_group</td><td>用户组信息表</td></tr><tr><td></td><td>act_id_info</td><td>用户信息详情表</td></tr><tr><td></td><td>act_id_membership</td><td>人与组关系表</td></tr><tr><td></td><td>act_id_priv</td><td>权限表</td></tr><tr><td></td><td>act_id_priv_mapping</td><td>用户或组权限关系表</td></tr><tr><td></td><td>act_id_property</td><td>属性表</td></tr><tr><td></td><td>act_id_token</td><td>记录用户的token信息</td></tr><tr><td></td><td>act_id_user</td><td>用户表</td></tr></tbody></table><h3 id="二、部署流程相关表介绍"><a href="#二、部署流程相关表介绍" class="headerlink" title="二、部署流程相关表介绍"></a>二、部署流程相关表介绍</h3><h4 id="1、部署"><a href="#1、部署" class="headerlink" title="1、部署"></a>1、部署</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 部署流程    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//1、获取流程引擎processEngine对象</span>       <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> <span class="token class-name">ProcessEngines</span><span class="token punctuation">.</span><span class="token function">getDefaultProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2、获取RepositoryService</span>       <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//3、完成流程部署操作</span>       <span class="token class-name">Deployment</span> deploy <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span><span class="token string">"holiday-request.bpmn20.xml"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"员工请假流程"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deploy.getId() = "</span> <span class="token operator">+</span> deploy<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deploy.getName() = "</span> <span class="token operator">+</span> deploy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、部署流程涉及到的表"><a href="#2、部署流程涉及到的表" class="headerlink" title="2、部署流程涉及到的表"></a>2、部署流程涉及到的表</h4><h5 id="act-ge-bytearray"><a href="#act-ge-bytearray" class="headerlink" title="act_ge_bytearray"></a>act_ge_bytearray</h5><p>部署资源表</p><p><img src="./../../../images/image-20240114171129966.png" alt="image-20240114171129966"></p><h5 id="act-re-deployment"><a href="#act-re-deployment" class="headerlink" title="act_re_deployment"></a>act_re_deployment</h5><p>流程部署表</p><p><img src="./../../../images/image-20240114171526850.png" alt="image-20240114171526850"></p><h5 id="act-re-procdef"><a href="#act-re-procdef" class="headerlink" title="act_re_procdef"></a>act_re_procdef</h5><p>流程定义表</p><p><img src="./../../../images/image-20240114172138793.png" alt="image-20240114172138793"></p><p><img src="./../../../images/image-20240114172501249.png" alt="image-20240114172501249"></p><p>注意：<br>业务流程定义数据表。此表和ACT_RE_DEPLOYMENT是多对一的关系，即，一个部署的bar包里可能包含多个流程定义文件，每个流程定义文件都会有一条记录在ACT_REPROCDEF表内，每个流程定义的数据，都会对于ACT_GE_BYTEARRAY表内的一个资源文件和PNG图片文件。和ACT_GE_BYTEARRAY的关联是通过程序用ACT_GE_BYTEARRAY.NAME与ACT_RE_PROCDEF.NAME_完成的</p><h5 id="挂起和激活流程"><a href="#挂起和激活流程" class="headerlink" title="挂起和激活流程"></a>挂起和激活流程</h5><p>部署的流程默认的状态为激活，如果我们暂时不想使用该定义的流程，那么可以挂起该流程。当然该流程定义下边所有的流程实例全部暂停。</p><p>流程定义为挂起状态，该流程定义将不允许启动新的流程实例，同时该流程定义下的所有的流程实例都将全部挂起暂停执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 挂起流程     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 获取流程引擎对象</span>        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> <span class="token class-name">ProcessEngines</span><span class="token punctuation">.</span><span class="token function">getDefaultProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ProcessDefinition</span> processDefinition <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createProcessDefinitionQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">processDefinitionId</span><span class="token punctuation">(</span><span class="token string">"holiday:1:4"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取流程定义的状态</span>        <span class="token keyword">boolean</span> suspended <span class="token operator">=</span> processDefinition<span class="token punctuation">.</span><span class="token function">isSuspended</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"suspended = "</span> <span class="token operator">+</span> suspended<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>suspended<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 表示被挂起</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"激活流程定义"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            repositoryService<span class="token punctuation">.</span><span class="token function">activateProcessDefinitionById</span><span class="token punctuation">(</span><span class="token string">"holiday:1:4"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 表示激活状态</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"挂起流程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            repositoryService<span class="token punctuation">.</span><span class="token function">suspendProcessDefinitionById</span><span class="token punctuation">(</span><span class="token string">"holiday:1:4"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的实现其实就是更新了流程定义表中的字段</p><p>而且通过REV_字段来控制数据安全，也是一种乐观锁的体现了，如果要启动一个已经挂起的流程就会出现如下的错误</p><p><img src="./../../../images/image-20240114172759582.png" alt="image-20240114172759582"></p><h3 id="三、启动流程相关表"><a href="#三、启动流程相关表" class="headerlink" title="三、启动流程相关表"></a>三、启动流程相关表</h3><h4 id="1、启动流程"><a href="#1、启动流程" class="headerlink" title="1、启动流程"></a>1、启动流程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 启动流程实例    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 获取流程引擎对象</span>       <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> <span class="token class-name">ProcessEngines</span><span class="token punctuation">.</span><span class="token function">getDefaultProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 启动流程实例通过 RuntimeService 对象</span>       <span class="token class-name">RuntimeService</span> runtimeService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRuntimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 构建流程变量</span>       <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"employee"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">// 谁申请请假</span>       variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nrOfHolidays"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请几天假</span>       variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">,</span><span class="token string">"病假"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请假的原因</span>       <span class="token comment">// 启动流程实例，第一个参数是流程定义的id</span>       <span class="token class-name">ProcessInstance</span> processInstance <span class="token operator">=</span> runtimeService               <span class="token punctuation">.</span><span class="token function">startProcessInstanceById</span><span class="token punctuation">(</span><span class="token string">"holiday:1:4"</span><span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动流程实例</span>       <span class="token comment">// 输出相关的流程实例信息</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"流程定义的ID："</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"流程实例的ID："</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前活动的ID："</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们启动了一个流程实例后，会在ACT_RU_*对应的表结构中操作,运行时实例涉及的表结构共10张</p><ol><li>ACT_RU_DEADLETTER_JOB 正在运行的任务表</li><li>ACT_RU_EVENT_SUBSCR 运行时事件</li><li>ACT_RU_EXECUTION 运行时流程执行实例</li><li>ACT_RU_HISTORY_JOB 历史作业表</li><li>ACT_RU_IDENTITYLINK 运行时用户关系信息</li><li>ACT_RU_JOB 运行时作业表</li><li>ACT_RU_SUSPENDED_JOB 暂停作业表</li><li>ACT_RU_TASK 运行时任务表</li><li>ACT_RU_TIMER_JOB 定时作业表</li><li>ACT_RU_VARIABLE 运行时变量表</li></ol><h5 id="act-ru-execution"><a href="#act-ru-execution" class="headerlink" title="act_ru_execution"></a>act_ru_execution</h5><p><img src="./../../../images/image-20240114174234349.png" alt="image-20240114174234349"></p><p>ACT_ID对应：</p><p><img src="./assets/image-20240114174326163.png" alt="image-20240114174326163"></p><h5 id="act-ru-task"><a href="#act-ru-task" class="headerlink" title="act_ru_task"></a>act_ru_task</h5><p>运行时任务表</p><p><img src="./../../../images/image-20240114212945975.png" alt="image-20240114212945975"></p><h5 id="act-ru-variable"><a href="#act-ru-variable" class="headerlink" title="act_ru_variable"></a>act_ru_variable</h5><p>运行时变量表</p><p><img src="./../../../images/image-20240114213313304.png" alt="image-20240114213313304"></p><h5 id="act-ru-identitylink"><a href="#act-ru-identitylink" class="headerlink" title="act_ru_identitylink"></a>act_ru_identitylink</h5><p>运行时用户关系信息</p><p><img src="./../../../images/image-20240114213626047.png" alt="image-20240114213626047"></p><h3 id="四、处理流程"><a href="#四、处理流程" class="headerlink" title="四、处理流程"></a>四、处理流程</h3><p>流程流转到zhangsan，可以进行完成任务操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 完成任务    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCompleteTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">processDefinitionId</span><span class="token punctuation">(</span><span class="token string">"holidayRequest:6:60003"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processInstanceId</span><span class="token punctuation">(</span><span class="token string">"62501"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> processVariables <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">getProcessVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> processVariables<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       processVariables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"approved"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//完成任务</span>       taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>processVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理完了一个工作流程后，我们来看看相关的表结构信息</p><p>首先我们会发现</p><ol><li>ACT_RU_EXECUTION 运行时流程执行实例</li><li>ACT_RU_IDENTITYLINK 运行时用户关系信息</li><li>ACT_RU_TASK 运行时任务表</li><li>ACT_RU_VARIABLE 运行时变量表</li></ol><p>这四张表中对应的数据都没有了，也就是这个流程已经不是运行中的流程了。然后在对应的历史表中我们可以看到相关的信息</p><ol><li>ACT_HI_ACTINST 历史的流程实例</li><li>ACT_HI_ATTACHMENT 历史的流程附件</li><li>ACT_HI_COMMENT 历史的说明性信息</li><li>ACT_HI_DETAIL 历史的流程运行中的细节信息</li><li>ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系</li><li>ACT_HI_PROCINST 历史的流程实例</li><li>ACT_HI_TASKINST 历史的任务实例</li><li>ACT_HI_VARINST 历史的流程运行中的变量信息</li></ol><h5 id="act-hi-actinst"><a href="#act-hi-actinst" class="headerlink" title="act_hi_actinst"></a>act_hi_actinst</h5><p>历史的流程实例</p><p><img src="./../../../images/image-20240114215533396.png" alt="image-20240114215533396"></p><h5 id="act-hi-taskinst"><a href="#act-hi-taskinst" class="headerlink" title="act_hi_taskinst"></a>act_hi_taskinst</h5><p>历史的任务实例</p><h5 id="act-hi-varinst"><a href="#act-hi-varinst" class="headerlink" title="act_hi_varinst"></a>act_hi_varinst</h5><p>历史的流程运行中的变量信息：流程变量虽然在任务完成后在流程实例表中会删除，但是在历史表中还是会记录的</p>]]></content>
      
      
      <categories>
          
          <category> Flowable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flowable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之简单工厂模式</title>
      <link href="/2024/01/26/hou-duan/01-she-ji-mo-shi/02-jian-dan-gong-han-mo-shi/"/>
      <url>/2024/01/26/hou-duan/01-she-ji-mo-shi/02-jian-dan-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城之问题集</title>
      <link href="/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/01-feign-jin-xing-yuan-cheng-diao-yong-diu-shi-qing-qiu-tou-xin-xi/feign-jin-xing-yuan-cheng-diao-yong-diu-shi-qing-qiu-tou-wen-ti/"/>
      <url>/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/01-feign-jin-xing-yuan-cheng-diao-yong-diu-shi-qing-qiu-tou-xin-xi/feign-jin-xing-yuan-cheng-diao-yong-diu-shi-qing-qiu-tou-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="feign进行远程调用丢失请求头问题"><a href="#feign进行远程调用丢失请求头问题" class="headerlink" title="feign进行远程调用丢失请求头问题"></a>feign进行远程调用丢失请求头问题</h2><h3 id="问题：feign进行远程调用丢失请求头"><a href="#问题：feign进行远程调用丢失请求头" class="headerlink" title="问题：feign进行远程调用丢失请求头"></a>问题：feign进行远程调用丢失请求头</h3><p><img src="./%E5%9B%BE%E7%89%87/1.png"></p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>feign在进行远程调用时会构建建一个新的request对象</p><p><a href="https://zhuanlan.zhihu.com/p/457256778">OpenFeign 的架构原理</a></p><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>自定义一个feign的拦截器，同步请求头信息</p><p><img src="./%E5%9B%BE%E7%89%87/2.png"></p><h3 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFeignInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"requestInterceptor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RequestInterceptor</span> <span class="token function">requestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RequestInterceptor</span> requestInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> template<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//1、使用RequestContextHolder拿到请求数据</span>                <span class="token class-name">ServletRequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>requestAttributes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//老请求</span>                    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> requestAttributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//2、同步请求头的数据（主要是cookie）</span>                        <span class="token comment">//把老请求的cookie值放到新请求上，进行一个同步</span>                        <span class="token class-name">String</span> cookie <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        template<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//同步所有的</span>                        <span class="token comment">/*Enumeration&lt;String> headerNames = request.getHeaderNames();                    while (headerNames.hasMoreElements()) &#123;                       String name = headerNames.nextElement();                        String value = request.getHeader(name);                       template.header(name,value);                   &#125;*/</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> requestInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Feign异步情况丢失上下文问题"><a href="#Feign异步情况丢失上下文问题" class="headerlink" title="Feign异步情况丢失上下文问题"></a>Feign异步情况丢失上下文问题</h2><p><img src="./%E5%9B%BE%E7%89%87/3.png"></p><h3 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a>解决：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取当前线程请求头信息 (解决Feign异步调用丢失请求头问题)</span><span class="token class-name">RequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启第一个异步任务</span><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> addressFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//每一个线程都来共享之前的请求数据</span>    <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//业务操作</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> threadPoolExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
            <tag> 问题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城之幂等性介绍</title>
      <link href="/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/02-jie-kou-mi-deng-xing/bao-zheng-jie-kou-mi-deng-xing-jie-shao/"/>
      <url>/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/02-jie-kou-mi-deng-xing/bao-zheng-jie-kou-mi-deng-xing-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="保证java接口幂等性介绍"><a href="#保证java接口幂等性介绍" class="headerlink" title="保证java接口幂等性介绍"></a>保证java接口幂等性介绍</h2><h3 id="一、什么是幂等性"><a href="#一、什么是幂等性" class="headerlink" title="一、什么是幂等性"></a>一、什么是幂等性</h3><p>幂等是一个数学与计算机学概念，在数学中某一元运算为幂等时，其作用在任一元素两次后会和其作用一次的结果相同。在计算机中编程中，一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。</p><p>幂等函数或幂等方法是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。</p><h3 id="二、什么是接口幂等性"><a href="#二、什么是接口幂等性" class="headerlink" title="二、什么是接口幂等性"></a>二、什么是接口幂等性</h3><p>在HTTP/1.1中，对幂等性进行了定义。它描述了一次和多次请求某一个资源对于资源本身应该具有同样的结果（网络超时等问题除外），即第一次请求的时候对资源产生了副作用，但是以后的多次请求都不会再对资源产生副作用。</p><p>这里的副作用是不会对结果产生破坏或者产生不可预料的结果。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p><h3 id="三、为什么需要实现幂等性"><a href="#三、为什么需要实现幂等性" class="headerlink" title="三、为什么需要实现幂等性"></a>三、为什么需要实现幂等性</h3><p>在接口调用时一般情况下都能正常返回信息不会重复提交，不过在遇见以下情况时可以就会出现问题，如：</p><p>①、<strong>前端重复提交表单</strong>： 在填写一些表格时候，用户填写完成提交，很多时候会因网络波动没有及时对用户做出提交成功响应，致使用户认为没有成功提交，然后一直点提交按钮，这时就会发生重复提交表单请求。</p><p>②、<strong>用户恶意进行刷单：</strong> 例如在实现用户投票这种功能时，如果用户针对一个用户进行重复提交投票，这样会导致接口接收到用户重复提交的投票信息，这样会使投票结果与事实严重不符。</p><p>③、<strong>接口超时重复提交：</strong> 很多时候 HTTP 客户端工具都默认开启超时重试的机制，尤其是第三方调用接口时候，为了防止网络波动超时等造成的请求失败，都会添加重试机制，导致一个请求提交多次。</p><p>④、<strong>消息进行重复消费：</strong> 当使用 MQ 消息中间件时候，如果发生消息中间件出现错误未及时提交消费信息，导致发生重复消费。</p><p>使用幂等性最大的优势在于使接口保证任何幂等性操作，免去因重试等造成系统产生的未知的问题。</p><h3 id="四、引入幂等性后对系统的影响"><a href="#四、引入幂等性后对系统的影响" class="headerlink" title="四、引入幂等性后对系统的影响"></a>四、引入幂等性后对系统的影响</h3><p>幂等性是为了简化客户端逻辑处理，能放置重复提交等操作，但却增加了服务端的逻辑复杂性和成本，其主要是：</p><p>把并行执行的功能改为串行执行，降低了执行效率。</p><p>增加了额外控制幂等的业务逻辑，复杂化了业务功能</p><p>所以在使用时候需要考虑是否引入幂等性的必要性，根据实际业务场景具体分析，除了业务上的特殊要求外，一般情况下不需要引入的接口幂等性。</p><h3 id="五、Restfull-API接口的幂等性"><a href="#五、Restfull-API接口的幂等性" class="headerlink" title="五、Restfull API接口的幂等性"></a>五、Restfull API接口的幂等性</h3><p>现在流行的  Restful 推荐的几种 HTTP 接口方法中，分别存在幂等与不能保证幂等的方法，如下：</p><blockquote><p>满足幂等：√  ；不满足幂等： × ；可能满足也可能不满足幂等，根据实际业务逻辑有关： -  ；</p></blockquote><table><thead><tr><th>方法类型</th><th align="left">是否幂等</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td align="left">√</td><td>Get请求一般用于获取资源。不会也不应该对系统资源进行改变，所以是幂等的</td></tr><tr><td>POST</td><td align="left">×</td><td>Post请求一般用于创建新的资源。其每次执行都会新增数据，所以不是幂等的</td></tr><tr><td>PUT</td><td align="left">-</td><td>Put请求一般用于修改资源。该操作则分情况来判断是不是满足幂等。更新操作中直接根据某个值进行更新，也能保证幂等。不过执行累加操作的更新是非幂等的</td></tr><tr><td>DELETE</td><td align="left">-</td><td>Delete方法一般用于删除资源。该操作也许要分情况来判断是不是满足幂等，当根据唯一值进行删除时，删除同一个数据 多次执行效果一样。不过需要注意，带查询条件的删除则就不一定满足幂等了。例如在根据条件进行删除后，这是新增加了一条数据A 满足查询条件，然后又执行了一次删除，那么将会导致新增加的这条满足条件的数据A 也被删除了</td></tr><tr><td></td><td align="left"></td><td></td></tr></tbody></table><h3 id="六、如何实现幂等性"><a href="#六、如何实现幂等性" class="headerlink" title="六、如何实现幂等性"></a>六、如何实现幂等性</h3><h4 id="方案一：数据库唯一主键"><a href="#方案一：数据库唯一主键" class="headerlink" title="方案一：数据库唯一主键"></a>方案一：数据库唯一主键</h4><p>数据库唯一主键的实现主要是利用数据库中主键唯一约束的特性，一般来说唯一主键比较适用于“插入”时的幂等性，其能保证一张表中只能存在一条带该唯一主键的记录。</p><p>使用数据库唯一主键完成幂等性时需要注意的是，<strong>该主键一般来说并不是使用数据库中自增主键，而是使用分布式 ID</strong> 充当主键，这样才能能保证在分布式环境下 ID 的全局唯一性。</p><p><strong>适用：</strong>插入、删除操作</p><p><strong>使用限制：</strong>需要生成全局唯一ID</p><p><strong>主要流程：</strong></p><p><img src="./../../../../images/image-20240120150425586.png" alt="image-20240120150425586"></p><p>① 客户端执行创建请求，调用服务端接口。</p><p>② 服务端执行业务逻辑，生成一个分布式 ID，将该 ID 充当待插入数据的主键，然后执数据插入操作，运行对应的 SQL 语句。</p><p>③ 服务端将该条数据插入数据库中，如果插入成功则表示没有重复调用接口。如果抛出主键重复异常，则表示数据库中已经存在该条记录，返回错误信息到客户端。</p><h4 id="方案二：数据库乐观锁"><a href="#方案二：数据库乐观锁" class="headerlink" title="方案二：数据库乐观锁"></a>方案二：数据库乐观锁</h4><p>数据库乐观锁方案一般只能适用于执行“更新操作”的过程，我们可以提前在对应的数据表中多添加一个字段，充当当前数据的版本标识。这样每次对该数据库该表的这条数据执行更新时，都会将该版本标识作为一个条件，值为上次待更新数据中的版本标识的值。</p><p><strong>适用：</strong>更新操作</p><p><strong>使用限制：</strong>需要在数据库业务表中增加额外字段</p><p><strong>主要流程：</strong></p><p><img src="./../../../../images/image-20240120151927928.png" alt="image-20240120151927928"></p><p>为了每次执行更新时防止重复更新，确定更新的一定是要更新的内容，我们通常都会添加一个 version 字段记录当前的记录版本，这样在更新时候将该值带上，那么只要执行更新操作就能确定一定更新的是某个对应版本下的信息。这样每次执行更新时候，都要指定要更新的版本号，如下操作就能准确更新 version=5 的信息：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> my_table <span class="token keyword">SET</span> price<span class="token operator">=</span>price<span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">,</span>version<span class="token operator">=</span>version<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> version<span class="token operator">=</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面 WHERE 后面跟着条件 id=1 AND version=5 被执行后，id=1 的 version 被更新为 6，所以如果重复执行该条 SQL 语句将不生效，因为 id=1 AND version=5 的数据已经不存在，这样就能保住更新的幂等，多次更新对结果不会产生影响。</p><h4 id="方案三、防重Token令牌"><a href="#方案三、防重Token令牌" class="headerlink" title="方案三、防重Token令牌"></a>方案三、防重Token令牌</h4><p>针对客户端连续点击或者调用方的超时重试等情况，例如提交订单，此种操作就可以用 Token 的机制实现防止重复提交。</p><p>简单的说就是调用方在调用接口的时候先向后端请求一个全局 ID（Token），请求的时候携带这个全局 ID 一起请求（Token 最好将其放到 Headers 中），后端需要对这个 Token 作为 Key，用户信息作为 Value 到 Redis 中进行键值内容校验，如果 Key 存在且 Value 匹配就执行删除命令，然后正常执行后面的业务逻辑。如果不存在对应的 Key 或 Value 不匹配就返回重复执行的错误信息，这样来保证幂等操作。</p><p><strong>适用：</strong>插入、更新、删除操作</p><p><strong>使用限制：</strong>需要生成全局唯一Token；需要使用第三方组件Redis进行数据校验；</p><p><strong>主要流程：</strong></p><p><img src="./../../../../images/image-20240120162341983.png" alt="image-20240120162341983"></p><p>① 服务端提供获取 Token 的接口，该 Token 可以是一个序列号，也可以是一个分布式 ID 或者 UUID 串。</p><p>② 客户端调用接口获取 Token，这时候服务端会生成一个 Token 串。</p><p>③ 然后将该串存入 Redis 数据库中，以该 Token 作为 Redis 的键（注意设置过期时间）。</p><p>④ 将 Token 返回到客户端，客户端拿到后应存到表单隐藏域中。</p><p>⑤ 客户端在执行提交表单时，把 Token 存入到 Headers 中，执行业务请求带上该 Headers。</p><p>⑥ 服务端接收到请求后从 Headers 中拿到 Token，然后根据 Token 到 Redis 中查找该 key 是否存在。</p><p>⑦ 服务端根据 Redis 中是否存该 key 进行判断，如果存在就将该 key 删除，然后正常执行业务逻辑。如果不存在就抛异常，返回重复提交的错误信息。</p><blockquote><p>注意：在并发情况下，执行 Redis 查找数据与删除需要保证原子性，否则很可能在并发下无法保证幂等性。其实现方法可以使用分布式锁或者使用 Lua 表达式来注销查询与删除操作。</p></blockquote><h4 id="方案4：分布式锁"><a href="#方案4：分布式锁" class="headerlink" title="方案4：分布式锁"></a>方案4：分布式锁</h4><p>1、使用Redis的<code>setNx</code>命令实现接口幂等性</p><p>2、使用Redisson来加锁</p><blockquote><p><code>SETNX key value</code>：当且仅当<code>key</code>不存在时将<code>key</code>的值设为<code>value</code>;若给定的<code>key</code>已经存在，则<code>SETNX</code>不做任何动作。设置成功时返回<code>1</code>，否则返回<code>0</code>。</p></blockquote><p>主要流程：</p><p>1、客户端先请求服务端，会拿到一个能代表这次请求业务的唯一字段;</p><p>2、将该字段以<code>SETNX</code>的方式存入<code>Redis</code>中，并根据业务设置相应的超时时间;</p><p>3、如果设置成功，证明这是第一次请求，则执行后续的业务逻辑;</p><p>4、如果设置失败，则代表已经执行过当前请求，直接返回成功。</p><p><img src="./../../../../images/image-20240122124901466.png" alt="image-20240122124901466"></p><blockquote><p>需要特别注意的是：分布式锁一定要设置一个合理的过期时间，如果设置过短，无法有效的防止重复请求。如果设置过长，可能会浪费<code>redis</code>的存储空间，需要根据实际业务情况而定。</p></blockquote><h3 id="七、实现幂等性示例"><a href="#七、实现幂等性示例" class="headerlink" title="七、实现幂等性示例"></a>七、实现幂等性示例</h3><h4 id="方案3实现，"><a href="#方案3实现，" class="headerlink" title="方案3实现，"></a>方案3实现，</h4><p>代码示例：</p><p>1、获取token</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span><span class="token comment">/** *  这里的key根据具体的业务来设置，要保证是唯一的 */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token operator">/</span>getToken<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>token<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、验证令牌</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">validateToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token punctuation">,</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、验证令牌 【令牌的对比和删除必须保证原子性】</span>        <span class="token comment">//执行结果 ： 0-验证失败 1-验证成功</span>        <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>        <span class="token comment">//原子验证令牌和删除令牌</span>        <span class="token class-name">Long</span> result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>script<span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>                token<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">1L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//验证成功</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//验证失败，返回异常提示信息。。。</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h3><p>幂等性应该在设计系统时，是首要考虑的一个问题，尤其是在像支付宝，银行，互联网金融公司等涉及的都是钱的系统，既要高效，数据也要准确，所以不能出现多扣款，多打款等问题，这样会很难处理，用户体验也不好。在实际开发中，我们需要针对不同的业务场景我们需要灵活的选择幂等性的实现方式</p>]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城之本地锁&amp;分布式锁实现</title>
      <link href="/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/97-huan-cun-he-fen-bu-shi-suo/02-ben-di-suo-fen-bu-shi-suo-shi-xian/"/>
      <url>/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/97-huan-cun-he-fen-bu-shi-suo/02-ben-di-suo-fen-bu-shi-suo-shi-xian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
            <tag> 本地锁&amp;分布式锁实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城之Redisson介绍</title>
      <link href="/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/97-huan-cun-he-fen-bu-shi-suo/03-redisson-jie-shao/"/>
      <url>/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/97-huan-cun-he-fen-bu-shi-suo/03-redisson-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="Redisson实现分布式锁"><a href="#Redisson实现分布式锁" class="headerlink" title="Redisson实现分布式锁"></a><code>Redisson</code>实现分布式锁</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p><strong><code>Redisson</code></strong> <strong>是架设在</strong> <code>Redis</code> <strong>基础上</strong>的一个 Java 驻内存数据网格（In-Memory Data Grid）。充分的利用了 Redis 键值数据库提供的一系列优势，<strong>基于</strong> <strong>Java</strong> <strong>实用工具包中常用接口</strong>，为使用者提供了一系列具有分布式特性的常用工具类。<strong>使得原本作为协调单机多线程并发程序的工具包获得了协调分布式多机多线程并发系统的能力</strong>，大大降低了设计和研发大规模分布式 系统的难度。同时结合各富特色的分布式服务，更进一步简化了分布式环境中程序相互之间的协作。 </p><p>官方文档：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95</a></p><p>中文：<a href="https://blog.csdn.net/A_art_xiang/article/details/125525864">redisson使用全解——redisson官方文档+注释（上篇）_redisson官网中文-CSDN博客</a></p><h3 id="二、如何使用"><a href="#二、如何使用" class="headerlink" title="二、如何使用"></a>二、如何使用</h3><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson        使用redisson作为所有分布式锁，分布式对象等功能框架--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.20.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><h5 id="单机模式："><a href="#单机模式：" class="headerlink" title="单机模式："></a>单机模式：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRedissonConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 所有redisson的使用都是通过RedissonClient对象来操作     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">"shutdown"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建配置</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.88.129:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建RedissonClient实例</span>        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="集群模式："><a href="#集群模式：" class="headerlink" title="集群模式："></a>集群模式：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">useClusterServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">setScanInterval</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment">// 集群状态扫描间隔时间，单位是毫秒</span>    <span class="token comment">//可以用"redis://"来启用SSL连接</span>    <span class="token punctuation">.</span><span class="token function">addNodeAddress</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.88.129:7000"</span><span class="token punctuation">,</span> <span class="token string">"redis://192.168.88.129:6379"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addNodeAddress</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.88.128:7001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">useSentinelServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">setMasterName</span><span class="token punctuation">(</span><span class="token string">"master"</span><span class="token punctuation">)</span>    <span class="token comment">//可以用"redis://"来启用SSL连接</span>    <span class="token punctuation">.</span><span class="token function">addSentinelAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:26389"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:26379"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addSentinelAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:26319"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">useMasterSlaveServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//可以用"redis://"来启用SSL连接</span>    <span class="token punctuation">.</span><span class="token function">setMasterAddress</span><span class="token punctuation">(</span><span class="token string">"redis://127.0.0.1:6379"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addSlaveAddress</span><span class="token punctuation">(</span><span class="token string">"redis://127.0.0.1:6389"</span><span class="token punctuation">,</span> <span class="token string">"redis://127.0.0.1:6332"</span><span class="token punctuation">,</span> <span class="token string">"redis://127.0.0.1:6419"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addSlaveAddress</span><span class="token punctuation">(</span><span class="token string">"redis://127.0.0.1:6399"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RLock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"anyLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最常见的使用方法</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加锁以后 10 秒钟自动解锁// 无需调用 unlock 方法手动解锁</span><span class="token keyword">boolean</span> res <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 尝试加锁，最多等待 100 秒，上锁以后 10 秒自动解锁</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>     <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="lock和tryLock的区别"><a href="#lock和tryLock的区别" class="headerlink" title="lock和tryLock的区别"></a>lock和tryLock的区别</h5><p><code>lock() </code>方法是==阻塞获取锁==的方式，如果当前锁被其他线程持有，则当前线程会一直阻塞等待获取锁，直到获取到锁或者发生超时或中断等情况才会结束等待。该方法获取到锁之后可以保证线程对共享资源的访问是互斥的，适用于需要确保共享资源只能被一个线程访问的场景。Redisson 的 lock() 方法支持可重入锁和公平锁等特性，可以更好地满足多线程并发访问的需求。</p><p><code>tryLock() </code>方法是一种==非阻塞获取锁==的方式，在尝试获取锁时不会阻塞当前线程，而是立即返回获取锁的结果，如果获取成功则返回 true，否则返回 false。Redisson 的 tryLock() 方法支持加锁时间限制、等待时间限制以及可重入等特性，可以更好地控制获取锁的过程和等待时间，避免程序出现长时间无法响应等问题。</p><p>因此，两种获取锁的方式各有优缺点，在实际应用中需要根据具体场景和业务需求来选择合适的方法，以确保程序的正确性和高效性。</p><h5 id="lock-源码："><a href="#lock-源码：" class="headerlink" title="lock()源码："></a>lock()源码：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">boolean</span> interruptibly<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 获取当前线程 ID</span>    <span class="token keyword">long</span> threadId <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取锁，正常获取锁则ttl为null，竞争锁时返回锁的过期时间</span>    <span class="token class-name">Long</span> ttl <span class="token operator">=</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 订阅锁释放事件</span>    <span class="token comment">// 如果当前线程通过 Redis 的 channel 订阅锁的释放事件获取得知已经被释放，则会发消息通知待等待的线程进行竞争</span>    <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedissonLockEntry</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptibly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        commandExecutor<span class="token punctuation">.</span><span class="token function">syncSubscriptionInterrupted</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        commandExecutor<span class="token punctuation">.</span><span class="token function">syncSubscription</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 循环重试获取锁，直至重新获取锁成功才跳出循环</span>            <span class="token comment">// 此种做法阻塞进程，一直处于等待锁手动释放或者超时才继续线程    </span>            ttl <span class="token operator">=</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    future<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>ttl<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptibly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    future<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>ttl<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptibly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    future<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    future<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquireUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 最后释放订阅事件</span>        <span class="token function">unsubscribe</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="tryLock-源码："><a href="#tryLock-源码：" class="headerlink" title="tryLock()源码："></a>tryLock()源码：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 转成毫秒，后面都是以毫秒为单位</span>    <span class="token keyword">long</span> time <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当前时间</span>    <span class="token keyword">long</span> current <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 线程ID-线程标识</span>    <span class="token keyword">long</span> threadId <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 尝试获取锁 tryAcquire() !!!</span>    <span class="token class-name">Long</span> ttl <span class="token operator">=</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果上面尝试获取锁返回的是null，表示成功；如果返回的是时间则表示失败。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// 剩余等待时间 = 最大等待时间 -（用现在时间 - 获取锁前的时间）</span>    time <span class="token operator">-=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> current<span class="token punctuation">;</span>     <span class="token comment">// 剩余等待时间 &lt; 0 失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">acquireFailed</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// 再次获取当前时间</span>    current <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重试逻辑，但不是简单的直接重试！</span>    <span class="token comment">// subscribe是订阅的意思</span>    <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedissonLockEntry</span><span class="token punctuation">></span></span> subscribeFuture <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果在剩余等待时间内，收到了释放锁那边发过来的publish，则才会再次尝试获取锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscribeFuture<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscribeFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            subscribeFuture<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token comment">// 取消订阅</span>                    <span class="token function">unsubscribe</span><span class="token punctuation">(</span>subscribeFuture<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取锁失败</span>        <span class="token function">acquireFailed</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 又重新计算了一下，上述的等待时间</span>        time <span class="token operator">-=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> current<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">acquireFailed</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">// 重试！</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ttl <span class="token operator">=</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 又获取锁失败，再次计算上面的耗时</span>            time <span class="token operator">-=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> currentTime<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">acquireFailed</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 采用信号量的方式重试！</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ttl <span class="token operator">&lt;</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                subscribeFuture<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>ttl<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                subscribeFuture<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 重新计算时间（充足就继续循环）</span>            time <span class="token operator">-=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> currentTime<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">acquireFailed</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token function">unsubscribe</span><span class="token punctuation">(</span>subscribeFuture<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//1、获取1把锁 ，只要锁的名字一样，就是同一把锁</span><span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、加锁</span><span class="token comment">//1)锁的自动续期：如果业务超长，运行期间自动给锁续上新的30s，不用担心业务时间长，锁自动过期删掉</span><span class="token comment">//2)加锁的业务只要运行完成，就不会给当前锁续期，即使不手动解锁，所也会默认在30秒以后自动删除</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞式等待。默认加的锁30秒有效时间</span><span class="token comment">//lock.lock(20L, TimeUnit.SECONDS);//指定锁的有效时间20s，自动解锁时间一定要大于业务的执行时间,在锁时间到了以后，不会自动续期</span>        <span class="token comment">/**         * 1）如果我们指定了时间，就会发送给redis执行脚本，进行占锁，默认超时就是我们指定的时间         * 2）如果我们未指定超时时间，就使用默认30s 【lockWatchdogTimeout看门狗的默认时间】         *      只要占锁成功，就会启动一个定时任务【重新设置锁的过期时间，新的过期时间【lockWatchdogTimeout看门狗的默认时间】】         *      定时任务：this.internalLockLeaseTime【看门狗的默认时间】 / 3L  == 10s 执行一次         */</span><span class="token comment">//最佳实战</span><span class="token comment">//1）、lock.lock(20L, TimeUnit.SECONDS);//省掉了整个续期的操作</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加锁成功。。执行业务..."</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token comment">//3、解锁  假设解锁代码没有运行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"释放锁。。"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="看门狗原理"><a href="#看门狗原理" class="headerlink" title="看门狗原理"></a>看门狗原理</h5><p>如果负责储存这个分布式锁的 Redisson 节点宕机以后，而且这个锁正好处于锁住的状态时，这个锁会出现锁死的状态。</p><p><code>为了避免这种情况的发生，Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。</code></p><p>默认情况下，看门狗的检查锁的超时时间是<code>30秒钟</code>，也可以通过修改<code>Config.lockWatchdogTimeout</code>来另行指定。</p><p>如果我们未指定 lock 的超时时间，就使用 30 秒作为看门狗的默认时间。只要占锁成功，就会启动一个定时任务：每隔 10 秒重新给锁设置过期的时间，过期时间为 30 秒。</p><p>当服务器宕机后，因为锁的有效期是 30 秒，所以会在 30 秒内自动解锁。（30秒等于宕机之前的锁占用时间+后续锁占用的时间）</p><h2 id="Redisson之分布式信号量介绍"><a href="#Redisson之分布式信号量介绍" class="headerlink" title="Redisson之分布式信号量介绍"></a><code>Redisson</code>之分布式信号量介绍</h2><h3 id="一、简介-1"><a href="#一、简介-1" class="headerlink" title="一、简介"></a>一、简介</h3><p><code>Semaphore</code>通常叫信号量，可以用来同时控制访问特定资源的线程数量，通过协调各个线程，保证合理的使用资源。</p><h3 id="二、API介绍"><a href="#二、API介绍" class="headerlink" title="二、API介绍"></a>二、API介绍</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RSemaphore</span> <span class="token keyword">extends</span> <span class="token class-name">RExpirable</span><span class="token punctuation">,</span> <span class="token class-name">RSemaphoreAsync</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 获得一个permit</span>    <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>      <span class="token comment">//获得var1个permit</span>    <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>      <span class="token comment">//尝试获得permit</span>    <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//尝试获得var1个permit</span>    <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//尝试获得permit, 等待时间var1</span>    <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">long</span> var1<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> var3<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">//尝试获得var1个permit, 等待时间var2</span>    <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> var4<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">//释放1个permit</span>    <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放var1个permit</span>    <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//信号量的permits数</span>    <span class="token keyword">int</span> <span class="token function">availablePermits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//清空permits</span>    <span class="token keyword">int</span> <span class="token function">drainPermits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置permits数</span>    <span class="token comment">/** * 尝试设置许可数量，设置成功，返回true，否则返回false */</span>    <span class="token keyword">boolean</span> <span class="token function">trySetPermits</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加permits数</span>    <span class="token keyword">void</span> <span class="token function">addPermits</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Semaphore的使用"><a href="#三、Semaphore的使用" class="headerlink" title="三、Semaphore的使用"></a>三、Semaphore的使用</h3><h4 id="示例1：-1"><a href="#示例1：-1" class="headerlink" title="示例1："></a>示例1：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 设置信号量     * @param num     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/setSemaphore/&#123;num&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">setSemaphore</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RSemaphore</span> park <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">"park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        park<span class="token punctuation">.</span><span class="token function">trySetPermits</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/**     * 车库停车     * 3车位     * 信号量也可以用作分布式限流；     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/park"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RSemaphore</span> park <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">"park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        park.acquire();//获取一个信号。（获取一个值）</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> park<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非阻塞，尝试获取</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//执行复杂业务</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"当前流量过大"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"停车成功ok==>"</span><span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/out"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RSemaphore</span> park <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">"park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        park<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"释放一个车位"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、源码分析"><a href="#四、源码分析" class="headerlink" title="四、源码分析"></a>四、源码分析</h3><h4 id="trySetPermits方法"><a href="#trySetPermits方法" class="headerlink" title="trySetPermits方法"></a>trySetPermits方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 尝试设置许可数量，设置成功，返回true，否则返回false */</span><span class="token keyword">boolean</span> <span class="token function">trySetPermits</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">trySetPermits</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token function">trySetPermitsAsync</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">trySetPermitsAsync</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span><span class="token function">evalWriteAsync</span><span class="token punctuation">(</span><span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LongCodec</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">,</span> <span class="token class-name">RedisCommands</span><span class="token punctuation">.</span><span class="token constant">EVAL_BOOLEAN</span><span class="token punctuation">,</span><span class="token comment">// 判断分布式信号量的key是否存在，如果不存在，才设置</span>               <span class="token string">"local value = redis.call('get', KEYS[1]); "</span> <span class="token operator">+</span>                       <span class="token string">"if (value == false) then "</span>                   <span class="token comment">// set "semaphore" permits</span>                   <span class="token comment">// 使用String数据结构设置信号量的许可数</span>                       <span class="token operator">+</span> <span class="token string">"redis.call('set', KEYS[1], ARGV[1]); "</span>                                            <span class="token comment">// 发布一条消息到redisson_sc:&#123;semaphore&#125;通道</span>                       <span class="token operator">+</span> <span class="token string">"redis.call('publish', KEYS[2], ARGV[1]); "</span>                    <span class="token comment">// 设置成功，返回1</span>                       <span class="token operator">+</span> <span class="token string">"return 1;"</span>                       <span class="token operator">+</span> <span class="token string">"end;"</span>                    <span class="token comment">// 设置失败，返回0</span>                       <span class="token operator">+</span> <span class="token string">"return 0;"</span><span class="token punctuation">,</span>               <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getChannelName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           future<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>r <span class="token operator">-></span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"permits set, permits: &#123;&#125;, name: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">permits</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"unable to set permits, permits: &#123;&#125;, name: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">permits</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> future<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>lua脚本参数说明</code>:</p><p><code>KEYS[1]:</code> 我们指定的分布式信号量key。例如redissonClient.getSemaphore(“park”)中的”park”)<br><code>KEYS[2]: </code>释放锁的channel名称，redisson_sc:{分布式信号量key}。在本例中，就是redisson_sc:{park}</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getChannelName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//name就是分布式信号量key</span>    <span class="token keyword">return</span> <span class="token function">prefixName</span><span class="token punctuation">(</span><span class="token string">"redisson_sc"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>ARGV[1]: </code>设置的许可数量</p></blockquote><h4 id="acquire-方法"><a href="#acquire-方法" class="headerlink" title="acquire()方法"></a>acquire()方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认1个</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// 对于没有获取锁的那些线程，订阅redisson_sc:&#123;分布式信号量key&#125;通道的消息</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedissonLockEntry</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        semaphorePubSub<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedissonLockEntry</span> entry <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span><span class="token function">getInterrupted</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">// 不断循环尝试获取许可</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                entry<span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 取消订阅</span>            <span class="token function">unsubscribe</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//        get(acquireAsync(permits));</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="tryAcquire方法"><a href="#tryAcquire方法" class="headerlink" title="tryAcquire方法"></a>tryAcquire方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token function">tryAcquireAsync</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">tryAcquireAsync</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">permits</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Permits amount can't be negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">permits</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFutureWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> commandExecutor<span class="token punctuation">.</span><span class="token function">evalWriteAsync</span><span class="token punctuation">(</span><span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LongCodec</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">,</span> <span class="token class-name">RedisCommands</span><span class="token punctuation">.</span><span class="token constant">EVAL_BOOLEAN</span><span class="token punctuation">,</span>                  <span class="token comment">// 获取当前剩余的许可数量</span>                  <span class="token string">"local value = redis.call('get', KEYS[1]); "</span> <span class="token operator">+</span>                 <span class="token comment">// 许可不为空，并且许可数量 大于等于 当前线程申请的许可数量   </span>                  <span class="token string">"if (value ~= false and tonumber(value) >= tonumber(ARGV[1])) then "</span> <span class="token operator">+</span>                      <span class="token comment">// 通过decrby减少剩余可用许可 </span>                      <span class="token string">"local val = redis.call('decrby', KEYS[1], ARGV[1]); "</span> <span class="token operator">+</span><span class="token comment">//成功获取，返回1</span>                      <span class="token string">"return 1; "</span> <span class="token operator">+</span>                  <span class="token string">"end; "</span> <span class="token operator">+</span>                  <span class="token comment">// 获取失败，返回0    </span>                  <span class="token string">"return 0;"</span><span class="token punctuation">,</span>                  <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="release方法"><a href="#release方法" class="headerlink" title="release方法"></a>release方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token function">releaseAsync</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">releaseAsync</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">permits</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Permits amount can't be negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">permits</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFutureWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span><span class="token function">evalWriteAsync</span><span class="token punctuation">(</span><span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StringCodec</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">,</span> <span class="token class-name">RedisCommands</span><span class="token punctuation">.</span><span class="token constant">EVAL_VOID</span><span class="token punctuation">,</span><span class="token comment">// 通过incrby增加许可数量</span>            <span class="token string">"local value = redis.call('incrby', KEYS[1], ARGV[1]); "</span> <span class="token operator">+</span>        <span class="token comment">// 发布一条消息到redisson_sc:&#123;semaphore&#125;中</span>                    <span class="token string">"redis.call('publish', KEYS[2], value); "</span><span class="token punctuation">,</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getChannelName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        future<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>o <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"released, permits: &#123;&#125;, name: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">permits</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> future<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、应用场景"><a href="#五、应用场景" class="headerlink" title="五、应用场景"></a>五、应用场景</h3><h4 id="限制并发访问量"><a href="#限制并发访问量" class="headerlink" title="限制并发访问量"></a>限制并发访问量</h4><p>在某些场景下，我们可能需要限制系统的并发访问量，防止资源被过度消耗。例如，我们希望限制某个接口每秒钟只能被100个请求访问。下面是一个使用Redisson信号量实现的示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RSemaphore</span> semaphore <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">"queryList:access:limit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> acquired <span class="token operator">=</span> semaphore<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>acquired<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//执行接口逻辑</span><span class="token comment">//。。。。。</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//返回接口访问量过大的错误信息</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//处理异常。。。。</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//释放许可</span>semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Redisson之读写锁"><a href="#Redisson之读写锁" class="headerlink" title="Redisson之读写锁"></a>Redisson之读写锁</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>保证一定能读到最新数据，修改期间写锁是互斥锁（排他锁）。读锁是一个共享锁</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取key为"rwLock"的锁对象，此时获取到的对象是 RReadWriteLock</span> <span class="token class-name">RReadWriteLock</span> rwLock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token string">"rwLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">RLock</span> lock <span class="token operator">=</span> rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取读锁read</span> <span class="token comment">// or</span> <span class="token class-name">RLock</span> lock <span class="token operator">=</span> rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取写锁write</span> <span class="token comment">// 2、加锁</span> lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 进行具体的业务操作</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> 　　<span class="token comment">// 3、释放锁</span> 　　lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * 读写锁： *  改数据加写锁，读数据加读锁 * *  保证一定能读到最新数据；修改期间 写锁 是排他锁（互斥锁，独享锁）。读锁是一个共享锁 *  写锁没释放，读就必须等待。 *  写+读：等待写锁释放 *  写+写：阻塞方式 *  读+写：等待读锁释放- *  读+读： 相当于无锁 * *  只要有写锁存在，则必须等待 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>无论是读请求先执行还是写请求先执行，只要涉及到写锁，则都会阻塞，如果是先写再读，则读锁等待，如果是先读再写，则写锁等待</strong></p>]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
            <tag> Redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城之缓存</title>
      <link href="/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/97-huan-cun-he-fen-bu-shi-suo/01-huan-cun/"/>
      <url>/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/97-huan-cun-he-fen-bu-shi-suo/01-huan-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="一、缓存"><a href="#一、缓存" class="headerlink" title="一、缓存"></a>一、缓存</h2><h3 id="1、缓存的使用"><a href="#1、缓存的使用" class="headerlink" title="1、缓存的使用"></a>1、缓存的使用</h3><p>为了系统性能的提升，我们一般都会将部分数据放入缓存中，加速访问。而 db 承担数据落盘工作。 </p><p><strong>哪些数据适合放入缓存？</strong> </p><p><strong>即时性、数据一致性要求不高的</strong>、<strong>访问量大且更新频率不高的数据（读多，写少）</strong> </p><p>举例：电商类应用，商品分类，商品列表等适合缓存并加一个失效时间(根据数据更新频率来定)，后台如果发布一个商品，买家需要 5 分钟才能看到新的商品一般还是可以接受的。</p><p><img src="./../../../../images/image-20240124164625152.png" alt="image-20240124164625152"></p><blockquote><p><strong>注意：</strong>在开发中，凡是放入缓存中的数据我们都应该指定过期时间，使其可以在系统即使没有主动更新数据也能自动触发数据加载进缓存的流程。避免业务崩溃导致的数据永久不一致问题。</p></blockquote><h3 id="2、整合Redis作为缓存"><a href="#2、整合Redis作为缓存" class="headerlink" title="2、整合Redis作为缓存"></a>2、整合Redis作为缓存</h3><p>①、引入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>②、配置yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.56.10  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>③、使用SpringBoot自动配置好的StringRedisTemplate来操作redis</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> ops <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ops<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world_"</span><span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> hello <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④、切换使用jedis</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> 产生堆外内存溢出：<span class="token class-name">OutOfDirectMemoryError</span><span class="token number">1</span><span class="token punctuation">)</span>、springboot2<span class="token punctuation">.</span><span class="token number">0</span>之后默认使用lettuce作为操作redis的客户端，它使用netty进行网络通信<span class="token number">2</span><span class="token punctuation">)</span>、lettuce的bug导致netty堆外内存溢出 <span class="token operator">-</span><span class="token class-name">Xmx300m</span><span class="token punctuation">;</span>netty如果没指定堆外内存，默认使用<span class="token operator">-</span><span class="token class-name">Xmx300m</span><span class="token number">3</span><span class="token punctuation">)</span> 可以通过<span class="token operator">-</span><span class="token class-name">Did</span><span class="token punctuation">.</span>netty<span class="token punctuation">.</span>maxDirectMemory设置解决方案：不能使用<span class="token operator">-</span><span class="token class-name">Did</span><span class="token punctuation">.</span>netty<span class="token punctuation">.</span>maxDirectMemory只调大堆外内存        <span class="token number">1</span>）、升级lettuce客户端        <span class="token number">2</span>）、切换使用jedis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--        redis--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--            切换jedis--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、缓存失效问题"><a href="#二、缓存失效问题" class="headerlink" title="二、缓存失效问题"></a>二、缓存失效问题</h2><h3 id="1、缓存雪崩"><a href="#1、缓存雪崩" class="headerlink" title="1、缓存雪崩"></a>1、缓存雪崩</h3><p>缓存雪崩是指在我们设置缓存时key采用了相同的过期时间或者Redis主机宕机， 导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p><p><code>解决</code>：</p><ul><li>redis中key设置永不过期或过期时间错开：原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li><li>redis缓存集群实现高可用：【主从+哨兵】、【集群】、【开启Redis持久化机制aof/rdb，尽快恢复缓存集群】</li><li>服务降级：阿里Sentinel限流&amp;降级</li></ul><h3 id="2、缓存穿透"><a href="#2、缓存穿透" class="headerlink" title="2、缓存穿透"></a>2、缓存穿透</h3><p><strong>缓存穿透</strong>是指<strong>查询一个一定不存在的数据</strong>，由于缓存是不命中，将去查询数据库，但是数据库也无此记录，我们没有将这次查询的 null 写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。 </p><p><strong>在流量大时</strong>，可能 DB 就挂掉了，要是有人利用不存在的 key 频繁攻击我们的应用，这就是漏洞。 </p><p><strong><code>解决：</code></strong></p><p><strong>①、空对象缓存或缺省值</strong> 【ps：要添加过期时间】</p><p>此方法架不住黑客的恶意攻击，有缺陷……，只能解决key相同的情况</p><p><strong>②、使用谷歌的布隆过滤器Guava解决</strong></p><p>引入依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--guava Google 开源的 Guava 中自带的布隆过滤器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>23.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体实现可以看Redis篇</p><p><img src="./../../../../images/image-20240124171644129.png" alt="image-20240124171644129"></p><p><strong>布隆过滤器说明：</strong></p><p><img src="./../../../../images/image-20240124172958789.png" alt="image-20240124172958789"></p><h3 id="3、缓存击穿"><a href="#3、缓存击穿" class="headerlink" title="3、缓存击穿"></a>3、缓存击穿</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>对于一些设置了过期时间的key，如果这些key可能会在某些 时间点被超高并发地访问，是一种非常“热点”的数据。 </p><p>如果这个key在大量请求同时进来前正好失效，那么所有对这个key的数据查询都落到db，我们称为缓存击穿。</p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a><strong><code>解决方案：</code></strong></h5><ul><li><p>方式一：差异失效时间。对于频繁访问的热点key数据不设置过期时间</p></li><li><p>方式二：互斥更新，采用双检加锁策略</p><blockquote><p>多个线程同时去查询数据库的这条数据，那么我们可以在第一个查询数据的请求上使用一个 互斥锁来锁住它。</p><p>其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有缓存了，就直接走缓存。</p></blockquote></li></ul><h4 id="加锁时序："><a href="#加锁时序：" class="headerlink" title="加锁时序："></a>加锁时序：</h4><p><img src="./../../../../images/image-20240125101044292.png" alt="image-20240125101044292"></p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><h5 id="本地锁"><a href="#本地锁" class="headerlink" title="本地锁"></a><strong>本地锁</strong></h5><p><code>不使用于分布式系统</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//先查缓存</span>    <span class="token class-name">String</span> value <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//缓存存在直接返回</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//缓存不存在则对方法加锁</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//再差一次缓存</span>        value <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//缓存存在直接返回</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//二次查询缓存也不存在，直接查DB</span>        value <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把查出来的数据放到缓存里，加上过期时间</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="分布式锁实现"><a href="#分布式锁实现" class="headerlink" title="分布式锁实现"></a><strong>分布式锁实现</strong></h5><h2 id="三、分布式锁演进"><a href="#三、分布式锁演进" class="headerlink" title="三、分布式锁演进"></a>三、分布式锁演进</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><strong>基本原理</strong></h3><p><img src="./../../../../images/image-20240125105014786.png" alt="image-20240125105014786"></p><p>我们可以同时去一个地方“占坑”，如果占到，就执行逻辑。否则就必须等待，直到释放锁。 </p><p>“占坑”可以去redis，可以去数据库，可以去任何大家都能访问的地方。 </p><p>等待可以<strong>自旋</strong>的方式</p><h3 id="getDataFromDB"><a href="#getDataFromDB" class="headerlink" title="getDataFromDB()"></a><strong><code>getDataFromDB()</code></strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDataFromDB</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//得到锁以后，要再去缓存中查一次，如果没有才查db</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//缓存不为空直接返回</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//执行业务代码，查询数据库</span>     value <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将查到的数据放到缓存中</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h3><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><img src="./../../../../images/image-20240125124856002.png" alt="image-20240125124856002"></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 分布式锁——阶段一 * @return */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue1</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock"</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁成功，执行业务</span>        <span class="token class-name">String</span> dataFromDB <span class="token operator">=</span> <span class="token function">getDataFromDB</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//删除锁</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataFromDB<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁失败，重试</span>        <span class="token comment">//休眠100m重试</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token comment">//自旋的方式</span>        <span class="token keyword">return</span> <span class="token function">getValue1</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>setnx占好了位，业务代码异常或者程序在页面过程中宕机。没有执行删除锁逻辑，这就造成了<strong>死锁</strong> </p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a><strong>解决：</strong></h4><p>设置锁的自动过期，即使没有删除，会自动删除。<code>===&gt;阶段二</code></p><h3 id="阶段二"><a href="#阶段二" class="headerlink" title="阶段二"></a>阶段二</h3><h4 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h4><p><img src="./../../../../images/image-20240125130200398.png" alt="image-20240125130200398"></p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 分布式锁——阶段二 * @return */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue2</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock"</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁成功，执行业务</span>        <span class="token comment">//设置过期时间</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>        <span class="token class-name">String</span> dataFromDB <span class="token operator">=</span> <span class="token function">getDataFromDB</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//删除锁</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataFromDB<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁失败，重试</span>        <span class="token comment">//休眠100m重试</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token comment">//自旋的方式</span>        <span class="token keyword">return</span> <span class="token function">getValue2</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p>setnx设置好，正要去设置过期时间，宕机。又死锁了。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>设置过期时间和占位必须是原子的。redis支持使用setnx ex 命令    <code>====&gt;阶段3</code></p><h3 id="阶段三"><a href="#阶段三" class="headerlink" title="阶段三"></a>阶段三</h3><h4 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h4><p><img src="./../../../../images/image-20240125131058287.png" alt="image-20240125131058287"></p><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 分布式锁——阶段三 * @return */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue3</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock"</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁成功，执行业务</span>        <span class="token comment">//设置过期时间</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>        <span class="token class-name">String</span> dataFromDB <span class="token operator">=</span> <span class="token function">getDataFromDB</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//删除锁</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataFromDB<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁失败，重试</span>        <span class="token comment">//休眠100m重试</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token comment">//自旋的方式</span>        <span class="token keyword">return</span> <span class="token function">getValue3</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>如果由于业务时间很长，锁自己过期了，我们直接删除，有可能把别人正在持有的锁删除了。 </p><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>占锁的时候，值指定为<code>uuid</code>，每个人匹配是自己的锁才删除。<code>====&gt;阶段4</code></p><h3 id="阶段四"><a href="#阶段四" class="headerlink" title="阶段四"></a>阶段四</h3><h4 id="流程图-3"><a href="#流程图-3" class="headerlink" title="流程图"></a>流程图</h4><p><img src="./../../../../images/image-20240125132309172.png" alt="image-20240125132309172"></p><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 分布式锁——阶段四 * @return */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue4</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock"</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span>uuid<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁成功，执行业务</span>        <span class="token comment">//设置过期时间</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>        <span class="token class-name">String</span> dataFromDB <span class="token operator">=</span> <span class="token function">getDataFromDB</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先去redis查询下保证当前的锁是自己的。下面不能保证原子性。</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//删除锁</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dataFromDB<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁失败，重试</span>        <span class="token comment">//休眠100m重试</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token comment">//自旋的方式</span>        <span class="token keyword">return</span> <span class="token function">getValue4</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h4><p>如果正好判断是当前值，正要删除锁的时候，锁已经过期， 别人已经设置到了新的值。那么我们删除的是别人的锁</p><h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><p>验证锁和删除锁的操作必须保证原子性。使用redis+Lua脚本完成。<code>====&gt;阶段五，最终版本</code></p><h3 id="阶段五"><a href="#阶段五" class="headerlink" title="阶段五"></a>阶段五</h3><h4 id="流程图-4"><a href="#流程图-4" class="headerlink" title="流程图"></a>流程图</h4><p><img src="./../../../../images/image-20240125133456586.png" alt="image-20240125133456586"></p><p><strong>lua脚本：</strong></p><p><code>if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end</code></p><h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 分布式锁——阶段五 * @return */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue5</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock"</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span>uuid<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁成功，执行业务</span>        <span class="token comment">//设置过期时间</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>        <span class="token class-name">String</span> dataFromDB <span class="token operator">=</span> <span class="token function">getDataFromDB</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        dataFromDB <span class="token operator">=</span> <span class="token function">getDataFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取值对比，对比成功删除=原子性 lua脚本解锁</span>        <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">"if redis.call('get',KEYS[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>                <span class="token comment">//new DefaultRedisScript&lt;Long>(script,Long.class) 这个泛型是返回值类型</span>                <span class="token comment">//删除锁</span>            <span class="token class-name">Long</span> res <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dataFromDB<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁失败，重试</span>        <span class="token comment">//休眠100m重试</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token comment">//自旋的方式</span>        <span class="token keyword">return</span> <span class="token function">getValue5</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h4><p>保证加锁【占位+过期时间】和删除锁【判断+删除】的原子性。 </p><p>更难的事情，锁的自动续期</p><h4 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h4><p>使用Redisson ====》</p><h3 id="Redisson实现分布式锁"><a href="#Redisson实现分布式锁" class="headerlink" title="Redisson实现分布式锁"></a>Redisson实现分布式锁</h3><h4 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getCatalogJson2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//加入缓存逻辑，缓存中的数据是json字符串,</span><span class="token comment">//JSON跨语言跨平台兼容</span>    <span class="token class-name">String</span> catalogJSON <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"catalogJSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>catalogJSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//2、缓存中没有，查询数据库</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> catalogJsonFromDb <span class="token operator">=</span> <span class="token function">getCatalogJsonFromDbWithRedissonLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、将查到的数据放到缓存中,将对象转为json放到缓存中</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"catalogJSON"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>catalogJsonFromDb<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> catalogJsonFromDb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//缓存命中，直接返回</span>    <span class="token comment">//转为指定的对象</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>catalogJSON<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**     * 从数据库查询并封装数据     * redisson     *     * 缓存里面的数据如何和数据库保持一致     * 缓存数据一致性     * 1)、双写模式     * 2)、失效模式     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getCatalogJsonFromDbWithRedissonLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//注意锁的名字。锁的粒度，越细越快。</span>        <span class="token comment">//锁的粒度：约定：具体缓存的是某个数据，11-号商品：product-11-lock</span>        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"lock-redisson-catalog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获取分布式锁成功。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//加锁成功</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> dataFromDB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            dataFromDB <span class="token operator">=</span> <span class="token function">getDataFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//删除锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dataFromDB<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城之MD5加密</title>
      <link href="/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/96-md5/md5-jia-mi/"/>
      <url>/2024/01/26/hou-duan/99-gu-li-shang-cheng-xiang-mu-bi-ji/96-md5/md5-jia-mi/</url>
      
        <content type="html"><![CDATA[<h2 id="MD5加密概述"><a href="#MD5加密概述" class="headerlink" title="MD5加密概述"></a>MD5加密概述</h2><h3 id="MD5概述："><a href="#MD5概述：" class="headerlink" title="MD5概述："></a>MD5概述：</h3><p>MD5消息摘要算法，属Hash算法一类。MD5算法对输入任意长度的消息进行运行，产生一个128位的消息摘要(32位的数字字母混合码)。</p><h3 id="MD5主要特点"><a href="#MD5主要特点" class="headerlink" title="MD5主要特点:"></a>MD5主要特点:</h3><p>不可逆，相同数据的MD5值肯定一样，不同数据的MD5值不一样</p><p>(一个MD5理论上的确是可能对应无数多个原文的，因为MD5是有限多个的而原文可以是无数多个。比如主流使用的MD5将任意长度的“字节串映射为一个128bit的大整数。也就是一共有2^128种可能，大概是3.4*10^38，这个数字是有限多个的，而但是世界上可以被用来加密的原文则会有无数的可能性)</p><h3 id="MD5的性质："><a href="#MD5的性质：" class="headerlink" title="MD5的性质："></a>MD5的性质：</h3><p>1、压缩性：任意长度的数据，算出的MD5值长度都是固定的(相当于超损压缩)。</p><p>2、容易计算：从原数据计算出MD5值很容易。</p><p>3、抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</p><p>4、弱抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</p><p>5、强抗碰撞：想找到两个不同的数据，使它们具有相同的MD5值，是非常困难的。</p><p>虽说MD5有不可逆的特点</p><p>但是由于某些MD5破解网站，专门用来查询MD5码，其通过把常用的密码先MD5处理，并将数据存储起来，然后跟需要查询的MD5结果匹配，这时就有可能通过匹配的MD5得到明文，所以有些简单的MD5码是反查到加密前原文的。</p><p>为了让MD5码更加安全，涌现了很多其他方法，如加盐。 盐要足够长足够乱 得到的MD5码就很难查到。</p><h3 id="MD5用途："><a href="#MD5用途：" class="headerlink" title="MD5用途："></a>MD5用途：</h3><p>1.防止被篡改：</p><p>1）比如发送一个电子文档，发送前，我先得到MD5的输出结果a。然后在对方收到电子文档后，对方也得到一个MD5的输出结果b。如果a与b一样就代表中途未被篡改。</p><p>2）比如我提供文件下载，为了防止不法分子在安装程序中添加木马，我可以在网站上公布由安装文件得到的MD5输出结果。</p><p>3）SVN在检测文件是否在CheckOut后被修改过，也是用到了MD5.</p><p>2.防止直接看到明文：</p><p>现在很多网站在数据库存储用户的密码的时候都是存储用户密码的MD5值。这样就算不法分子得到数据库的用户密码的MD5值，也无法知道用户的密码。（比如在UNIX系统中用户的密码就是以MD5（或其它类似的算法）经加密后存储在文件系统中。当用户登录的时候，系统把用户输入的密码计算成MD5值，然后再去和保存在文件系统中的MD5值进行比较，进而确定输入的密码是否正确。通过这样的步骤，系统在并不知道用户密码的明码的情况下就可以确定用户登录系统的合法性。这不但可以避免用户的密码被具有系统管理员权限的用户知道，而且还在一定程度上增加了密码被破解的难度。）</p><p>3.防止抵赖（数字签名）：</p><p>这需要一个第三方认证机构。例如A写了一个文件，认证机构对此文件用MD5算法产生摘要信息并做好记录。若以后A说这文件不是他写的，权威机构只需对此文件重新产生摘要信息，然后跟记录在册的摘要信息进行比对，相同的话，就证明是A写的了。这就是所谓的“数字签名”。</p><h2 id="加密算法—BCryptPasswordEncoder的使用及原理"><a href="#加密算法—BCryptPasswordEncoder的使用及原理" class="headerlink" title="加密算法—BCryptPasswordEncoder的使用及原理"></a>加密算法—<code>BCryptPasswordEncoder</code>的使用及原理</h2><h3 id="一-、介绍"><a href="#一-、介绍" class="headerlink" title="一 、介绍"></a>一 、介绍</h3><p>spring security中的<code>BCryptPasswordEncoder</code>方法采用<code>SHA-256 +随机盐+密钥</code>对密码进行加密。SHA系列是Hash算法，不是加密算法，使用加密算法意味着可以解密（这个与编码/解码一样），但是采用Hash处理，其过程是不可逆的。</p><p>不可逆加密SHA：</p><p>基本原理：加密过程中不需要使用密钥，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，无法根据密文推算出明文。</p><p>RSA算法历史：底层-欧拉函数</p><p>1）加密(encode)：注册用户时，使用SHA-256+随机盐+密钥把用户输入的密码进行hash处理，得到密码的hash值，然后将其存入数据库中。</p><p>2）密码匹配(matches)：用户登录时，密码匹配阶段并没有进行密码解密（因为密码经过Hash处理，是不可逆的），而是使用相同的算法把用户输入的密码进行hash处理，得到密码的hash值，然后将其与从数据库中查询到的密码hash值进行比较。如果两者相同，说明用户输入的密码正确。</p><h3 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h3><h4 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、PasswordConfig"><a href="#2、PasswordConfig" class="headerlink" title="2、PasswordConfig"></a>2、<code>PasswordConfig</code></h4><p>为了防止有人能根据密文推测出salt，我们需要在使用<code>BCryptPasswordEncoder</code>时配置随即密钥，创建一个<code>PasswordConfig</code>配置类，注册<code>BCryptPasswordEncoder</code>对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">SecureRandom</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author zyj * @create 2023-12-07-10:47 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"encoder.crypt"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PasswordConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 加密强度     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> strength<span class="token punctuation">;</span>    <span class="token comment">/**     * 干扰因子     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secret<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">BCryptPasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//System.out.println("secret = " + secret);</span>        <span class="token comment">//对干扰因子加密</span>        <span class="token class-name">SecureRandom</span> secureRandom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span>secret<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对密码加密</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span>strength<span class="token punctuation">,</span> secureRandom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、application-yaml"><a href="#3、application-yaml" class="headerlink" title="3、application.yaml"></a>3、application.yaml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">encoder</span><span class="token punctuation">:</span>  <span class="token key atrule">crypt</span><span class="token punctuation">:</span>    <span class="token key atrule">secret</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.uuid<span class="token punctuation">&#125;</span> <span class="token comment"># 随机的密钥，使用uuid</span>    <span class="token key atrule">strength</span><span class="token punctuation">:</span> <span class="token number">6</span> <span class="token comment"># 加密强度4~31，决定盐加密时的运算强度，超过10以后加密耗时会显著增加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BCryptPasswordEncoder</span> encoder<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">savePassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// encode()：对明文字符串进行加密</span>        <span class="token comment">//注册用户时，使用SHA-256+随机盐+密钥把用户输入的密码进行hash处理，得到密码的hash值，然后将其存入数据库中。</span>        <span class="token comment">//每次加密结果都不一样</span>        <span class="token class-name">String</span> encode1 <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"encode1:"</span> <span class="token operator">+</span> encode1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> encode2 <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"encode2:"</span> <span class="token operator">+</span> encode2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// matches()：对加密前和加密后是否匹配进行验证</span>        <span class="token comment">//用户登录时，密码匹配阶段并没有进行密码解密（因为密码经过Hash处理，是不可逆的），</span>        <span class="token comment">// 而是使用相同的算法把用户输入的密码进行hash处理，得到密码的hash值，然后将其与从数据库中查询到的密码hash值进行比较。</span>        <span class="token comment">// 如果两者相同，说明用户输入的密码正确。</span>        <span class="token keyword">boolean</span> matches1 <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> encode1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"matches1:"</span> <span class="token operator">+</span> matches1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> matches2 <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> encode2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"matches2:"</span> <span class="token operator">+</span> matches2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、测试结果"><a href="#5、测试结果" class="headerlink" title="5、测试结果"></a>5、测试结果</h4><p><img src="..%5C100-%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%92%8C%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%5C%E5%9B%BE%E7%89%87%5C9.png" alt="9"></p>]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/2024/01/25/hou-duan/01-she-ji-mo-shi/01-dan-li-mo-shi/"/>
      <url>/2024/01/25/hou-duan/01-she-ji-mo-shi/01-dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法(静态方法)。</p><p>比如Hibernate的SessionFactory，它充当数据存储源的代理，并负责创建Session对象。SessionFactory并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFactory就够，这是就会使用到单例模式。</p><h3 id="二、实现单例模式的方式"><a href="#二、实现单例模式的方式" class="headerlink" title="二、实现单例模式的方式"></a>二、实现单例模式的方式</h3><h4 id="1、饿汉式"><a href="#1、饿汉式" class="headerlink" title="1、饿汉式"></a>1、饿汉式</h4><h5 id="①、静态常量"><a href="#①、静态常量" class="headerlink" title="①、静态常量"></a>①、静态常量</h5><p>步骤：</p><ol><li>构造器私有化 (防止 new )</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法。getInstance</li></ol><p>代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1、饿汉式（静态变量）</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有化构造器，防止直接new</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供一个静态属性 类型就是Singleton</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对外暴露一个静态方法getInstance，可以获取到该对象实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="②、静态代码块"><a href="#②、静态代码块" class="headerlink" title="②、静态代码块"></a>②、静态代码块</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1、饿汉式（静态代码块）</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有化构造器，防止直接new</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>    <span class="token comment">// 在静态代码块中，创建单例对象</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供一个静态属性 类型就是Singleton</span>    <span class="token comment">//对外暴露一个静态方法getInstance，可以获取到该对象实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优缺点说明："><a href="#优缺点说明：" class="headerlink" title="优缺点说明："></a><strong>优缺点说明</strong>：</h5><ol><li><p>优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</p></li><li><p>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费</p></li><li><p>这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法， 但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到lazy loading的效果</p></li><li><p>结论：这种单例模式**<code>可用</code><strong>，</strong>可能**造成内存浪费</p></li></ol><h4 id="2、懒汉式"><a href="#2、懒汉式" class="headerlink" title="2、懒汉式"></a>2、懒汉式</h4><h5 id="①、线程不安全"><a href="#①、线程不安全" class="headerlink" title="①、线程不安全"></a>①、线程不安全</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//懒汉式(线程不安全)</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供一个静态的公有方法，当使用到该方法时，才去创建 instance</span>    <span class="token comment">//即懒汉式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明</strong>：</p><ol><li><p>起到了Lazy Loading的效果，但是只能在单线程下使用。</p></li><li><p>如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式</p></li><li><p>结论：在实际开发中，<code>不要使用这种方式</code></p></li></ol><h5 id="②、线程安全—同步方法"><a href="#②、线程安全—同步方法" class="headerlink" title="②、线程安全—同步方法"></a>②、线程安全—同步方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//懒汉式(线程安全,同步方法)</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加了同步代码 ，解决了线程不安全问题</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明</strong>：</p><ol><li><p>解决了线程不安全问题</p></li><li><p>效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低</p></li><li><p>结论：在实际开发中，<code>不推荐使用这种方式</code></p></li></ol><h5 id="③、线程安全，同步代码块"><a href="#③、线程安全，同步代码块" class="headerlink" title="③、线程安全，同步代码块"></a>③、<strong>线程安全，同步代码块</strong></h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//懒汉式(线程安全，同步代码块)</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加了同步代码 ，解决了线程不安全问题</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明</strong>：</p><ol><li>这种方式，本意是想对第3种实现方式的改进，因为前面同步方法效率太低，改为同步产生实例化的的代码块</li></ol><ol start="2"><li> <strong>但是这种同步并不能起到线程同步的作用</strong>。跟第2种实现方式遇到的情形一致，假如一个线程进入了if(singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例</li></ol><ol start="3"><li>结论：在**<code>实际开发中，不能使用这种方式</code>**</li></ol><h5 id="④、双重检查【使用该方式】"><a href="#④、双重检查【使用该方式】" class="headerlink" title="④、双重检查【使用该方式】"></a>④、<strong>双重检查</strong>【使用该方式】</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//懒汉式(线程安全，双重检查)</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题, 同时解决懒加载问题</span>    <span class="token comment">//同时保证了效率, 推荐使用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明</strong>：</p><ol><li><p>Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。</p></li><li><p>这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象，也避免的反复进行方法同步.</p></li><li><p>线程安全；延迟加载；效率较高</p></li><li><p>结论：在实际开发中，<code>推荐使用这种单例设计模式</code></p></li></ol><h4 id="3、静态内部类"><a href="#3、静态内部类" class="headerlink" title="3、静态内部类"></a>3、静态内部类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//静态内部类</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonInstance</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明</strong>：</p><ol><li><p>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</p></li><li><p>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p></li><li><p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p></li><li><p>优点：避免了<strong>线程不安全</strong>，利用静态内部类特点实现延迟加载，效率高</p></li><li><p>结论：<code>推荐使用</code></p></li></ol><h4 id="4、枚举"><a href="#4、枚举" class="headerlink" title="4、枚举"></a>4、<strong>枚举</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//枚举</span><span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0000ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明</strong>：</p><ol><li><p>这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p></li><li><p>这种方式是Effective Java作者Josh Bloch 提倡的方式</p></li><li><p>结论：<code>推荐使用</code></p></li></ol><h3 id="三、单例模式的应用"><a href="#三、单例模式的应用" class="headerlink" title="三、单例模式的应用"></a>三、单例模式的应用</h3><p>JDK中，java.lang.Runtime就是经典的单例模式(饿汉式)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Runtime</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> currentRuntime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Returns the runtime object associated with the current Java application.     * Most of the methods of class &lt;code>Runtime&lt;/code> are instance     * methods and must be invoked with respect to the current runtime object.     *     * @return  the &lt;code>Runtime&lt;/code> object associated with the current     *          Java application.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** Don't let anyone else instantiate this class */</span>    <span class="token keyword">private</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、单例模式注意事项和细节说明"><a href="#四、单例模式注意事项和细节说明" class="headerlink" title="四、单例模式注意事项和细节说明"></a>四、<strong>单例模式注意事项和细节说明</strong></h3><p>单例模式注意事项和细节说明</p><ol><li><p>单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</p></li><li><p>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new</p></li><li><p><code>单例模式使用的场景</code>：<strong>需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session工厂等)</strong></p></li></ol><h3 id="五、volatile关键字的作用"><a href="#五、volatile关键字的作用" class="headerlink" title="五、volatile关键字的作用"></a>五、volatile关键字的作用</h3><h4 id="1-保证内存可见性"><a href="#1-保证内存可见性" class="headerlink" title="1 保证内存可见性"></a><strong>1 保证内存可见性</strong></h4><p>可见性是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果，另一个线程马上就能看到。</p><p>实现原理</p><p>当对非volatile变量进行读写的时候，每个线程先从主内存拷贝变量到CPU缓存中，如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的CPU cache中。</p><p>volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，保证了每次读写变量都从主内存中读，跳过CPU cache这一步。当一个线程修改了这个变量的值，新值对于其他线程是立即得知的。</p><h4 id="2-禁止指令重排"><a href="#2-禁止指令重排" class="headerlink" title="2 禁止指令重排"></a><strong>2 禁止指令重排</strong></h4><p>指令重排序是JVM为了优化指令、提高程序运行效率，在不影响单线程程序执行结果的前提下，尽可能地提高并行度。指令重排序包括编译器重排序和运行时重排序。</p><p>volatile变量禁止指令重排序。针对volatile修饰的变量，在读写操作指令前后会插入内存屏障，指令重排序时不能把后面的指令重排序到内存屏</p><p>示例说明：</p><p>double r = 2.1; //(1)</p><p>double pi = 3.14;//(2)</p><p>double area = pi<em>r</em>r;//(3)</p><p>虽然代码语句的定义顺序为1-&gt;2-&gt;3，但是计算顺序1-&gt;2-&gt;3与2-&gt;1-&gt;3对结果并无影响，所以编译时和运行时可以根据需要对1、2语句进行重排序。                 </p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
